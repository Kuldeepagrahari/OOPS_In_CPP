Entity : objects or grp of objects
blueprint: Class

method: function written inside a Class

Amazon: most probably implemented the products with class and objects

this: it is special ptr(that points to current object of the class) in C++, so to access object members we have to use '->' arrow operator in C++ = this -> prop or *(this).prop [*this (* -> dereferencing operator) : value at address stored in "this" ptr]

Data Hiding: In OOPS, this achieved by access modifiers (private, public, protected) and encapsulation -> data members and method members are bind together so that data can be managed better and can be made inaccessible outside the class when requires
and hence protect from unauthorized access

Constructors: 
0. Always defined in public scope
1. Constructor call starts automatically when program compiles, if no constructor then compiler itself call default constructor, no need to call excplicitly, and in whole program constructor is called only once during object creation
2. No Return type
3. Same name as Class
4. Memory Allocation happens for members during object creation / constructor call as class itself does not req much space into memory [ objects store into memory -> basically, not class ]
5. Memory Allocation -> responsiblity is on Constructor

3-Types of Constructor:
1. Non-Parameterized
2. Parameterized
3. Copy

Copy Constructor : Copy 1 object into another object or new object

Shallow Copy & Deep Copy
____________________________________
Shallow Copy : copies all the member values from one object to another
--------------------      --------------
| name = "sam"      |  => | name = "sam"|
| cgpa = 1X099      |     | cgpa = 1X099|
---------------------     ---------------
-------
| 8.8 |  -> inside Heap
-------
 1X099
 
 Now if you change cgpa for copied obj it will also reflect for original object as cgpa is pointing to same address inside Heap -> this is a kind of problem => It occur with both custom and default constructor call

# Note: Compiler only makes shallow copy as default copy constructor, it does not make deep copy as default, we need to make our own deep copy constructor
----------------------------------------
Deep Copy: not only copies member values but also make copies of any dynamically allocated memory that the members point to [allocate dif memory to those vars in the copy] -> Now if we make change into dynamically allocated vars in parent obj does not affect d.a.v. of child [copy] object
--------------------      --------------
| name = "sam"      |  => | name = "sam"|
| cgpa = 1X099      |     | cgpa = 1X103|
---------------------     ---------------
------- -------
| 8.8 | | 8.8 | -> inside Heap
------- -------
 1X099   1X103

 ______________________________________________________________________
 Constructor: Allocates memory to object members
 Destructor: Deallocate memory or free up the memory allocated dynamically, Compiler automatically make and call destructors at the end of program, but it only deletes static space but not dynamic space -> thats why we require to make destructors

 "delete" keyword is used to free up the space [ delete ptr ]
 # Note: Even if we make our own destructor, Destructor call by itself/compiler does in the end of program to free up the whole space occupied, we do not need to call it excplicitly

 ** Memory Leak: we make destructors so that no memory get wasted -> it will not affect much in our single file code but for large code bases of orgs it can raise much bigger problems -> that can be Memory Leak : where we have allocated memory to many vars but, after certain function calls we no longer using those vars, now those memory can not be allocated to other vars also and also not been in use currently -> means get wasted

 _______________________________________________________________________________________________________________________________
 4 Pillars of OOPS:
 1. Inheritance : When Members of Parent/Base class pass to Child/Derived class or derived class inherits parent class members
    * Helps in Code Reusability
    1. " : scope classname" is used to inherit a class into cur class
    2. In case of default/non-parameterized constructor, When we make an obj of child class then constructor of parent class call go first than child's constructor ELSE
    in case of parametrized -> we will call the parents constructor in child class manually... and again call for parent's constructor go first then child's constructor
    3. But in case of destructor its shows opp behavior and child's destructor calls first than parent's destructor always.
    output:
      parent constructor call...
      Child constructor call...
      Sam 21 22106
      Child destructor call...
      Parent destructor call...

Base Member Access \ Inheritance Type | Public Inheritance  | Protected Inheritance  | Private Inheritance
--------------------------------------|---------------------|------------------------|----------------------
public                                | public              | protected              | private
protected                             | protected           | protected              | private
private                               | Not Inherited       | Not Inherited          | Not Inherited

Types of Inheritance : 
1. Single Level: parent ->  child
2. Multi-level: Parent -> parent -> .. -> child
[ex: person(name, age) -> student(rollno) -> graduateStudent(researchTopic)]
Person constructor call... 
Student constructor call...
Graduates constructor call...
Sam 21 22106 Deep Learning
Graduates destructors call...
Student destructor call...
Person destructor call...
3. Multiple Inheritance: parent1   parent2   ...
                            \         /
                                child    -> child will be inheriting properties of multiple parents
   [Ex: student(name, roll no), Teacher(salary, age), TA( who is both student and teacher, inheriting name, age, salary, rollno ...)]
   class TA : public Student, public Teacher {

   };

   4.Hierarchial Inheritance
          Parent
         /      \
      child1  child2

      multiple classes inherit same parent class
   5. Hybrid [mix of all above types]

   _____________________________________________________________________________________________________________________________
   2. Polymorphism : Poly -> multiple, morph -> forms
      Compile Time Polymorphism -> as compiler has the responsibility to call constructor and methods
      _____________________________
      Ability of objects to behave in dif ways depending on the context -> obj knows which constructor it should call -> this is called constructor overloading[multiple constructors with dif parameters type/number ]

      * Similarly: Function Overloading : methods/fun with dif number of paramters or dif type of paramters
      